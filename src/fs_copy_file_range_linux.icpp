/*
  ISC License

  Copyright (c) 2018, Antonio SJ Musumeci <trapexit@spawn.link>

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#include "fs_copy_file_range.hpp"

#ifndef _GNU_SOURCE
# define _GNU_SOURCE
#endif

#include "to_neg_errno.hpp"

#include <cstdint>

#include <fcntl.h>
#include <stdio.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <unistd.h>


static
ssize_t
_copy_file_range_(const int           src_fd_,
                  off_t              *src_off_,
                  const int           dst_fd_,
                  off_t              *dst_off_,
                  const size_t        len_,
                  const unsigned int  flags_)
{
#ifdef SYS_copy_file_range
  int64_t rv;
  loff_t  src_off;
  loff_t  dst_off;
  loff_t *src_off_ptr;
  loff_t *dst_off_ptr;

  src_off     = ((src_off_ == NULL) ?    0 : *src_off_);
  dst_off     = ((dst_off_ == NULL) ?    0 : *dst_off_);
  src_off_ptr = ((src_off_ == NULL) ? NULL : &src_off);
  dst_off_ptr = ((dst_off_ == NULL) ? NULL : &dst_off);
  rv = ::syscall(SYS_copy_file_range,
                 src_fd_,
                 src_off_ptr,
                 dst_fd_,
                 dst_off_ptr,
                 len_,
                 flags_);

  if(rv != -1)
    {
      if(src_off_ != NULL)
        *src_off_ = src_off;
      if(dst_off_ != NULL)
        *dst_off_ = dst_off;
    }

  return ::to_neg_errno(rv);
#else
  return -EOPNOTSUPP;
#endif
}

ssize_t
fs::copy_file_range(const int           src_fd_,
                    off_t              *src_off_,
                    const int           dst_fd_,
                    off_t              *dst_off_,
                    const size_t        len_,
                    const unsigned int  flags_)
{
  return ::_copy_file_range_(src_fd_,
                             src_off_,
                             dst_fd_,
                             dst_off_,
                             len_,
                             flags_);
}
